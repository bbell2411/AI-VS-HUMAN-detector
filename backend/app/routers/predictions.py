from fastapi import APIRouter, HTTPException, status
from fastapi.responses import JSONResponse

from app.schemas.prediction import PredictionRequest, PredictionResponse
from app.services.ml_service import MLService

ml_service = MLService()

router = APIRouter(tags=["Predictions"])

@router.post(
    "/predictions/",
    response_model=PredictionResponse,
    status_code=status.HTTP_200_OK,
    summary="Predict text origin",
    description="Submit text for analysis to determine if it was generated by AI or written by a human."
    )
async def predict_text_origin(request: PredictionRequest) ->PredictionResponse:

    if len(request.text.strip()) < 10:
        raise HTTPException(status_code=400, detail="Text must be at least 10 characters long")
    if len(request.text) >10000:
       raise HTTPException(status_code=422, detail="Text is too long")
    try:
        result= await ml_service.predict_text_origin(request)
        return result
    except Exception as e:
        raise HTTPException(
            status_code= status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"prediction failed: {str(e)}"
            )
       
       