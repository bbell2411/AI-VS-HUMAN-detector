from fastapi import APIRouter, HTTPException, status

from app.schemas.prediction import PredictionRequest, PredictionResponse,ContentType, ModelInfoResponse, ModelInfo
from app.services.ml_service import MLService

ml_service = MLService()

router = APIRouter(tags=["Predictions"])

@router.post(
    "/predictions/",
    response_model=PredictionResponse,
    status_code=status.HTTP_200_OK,
    summary="Predict text origin",
    description="Submit text for analysis to determine if it was generated by AI or written by a human."
    )
async def predict_text_origin(request: PredictionRequest) ->PredictionResponse:

    if len(request.text.strip()) < 10:
        raise HTTPException(status_code=400, detail="Text must be at least 10 characters long")
    if len(request.text) >10000:
       raise HTTPException(status_code=422, detail="Text is too long")
    try:
        result= await ml_service.predict_text_origin(request)
        return result
    except Exception as e:
        raise HTTPException(
            status_code= status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"prediction failed: {str(e)}"
            )
@router.get(
    "/predictions/models/info",
    response_model=ModelInfoResponse,
    summary="Gets model information",
    description="Get information about the ML models currently loaded."
)
async def get_model_info() -> ModelInfoResponse:
    """Gets information about loaded model and their capabilities"""
    if ml_service.model == None:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Model not loaded, service currently unavailable"
                )
    try:
        model_info = ModelInfo(
        name="SVM + PCA AI Text Detector",
        version="1.0.0",
        status="loaded" if ml_service.model is not None else "not_loaded",
        accuracy="60%",
        features=["TF-IDF", "linguistic_features", "content_type", "PCA"]
    )
        return ModelInfoResponse(
        models={"text_classifier":model_info},
        supported_content_types=[c.value for c in ContentType],
        max_text_length=10000,
        min_text_length=1
    )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get model info: {str(e)}"
        )
    # and continue with psql and sqlalchemy
       
       